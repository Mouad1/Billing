//Block element
@mixin element($elem) {
  &__#{$elem} {
    @content;
  }
}

//Block modifier
@mixin modifier($modif) {
  &--#{$modif} {
    @content;
  }
}

/* ==========================================================================
   #CENTERING
   ========================================================================== */

//centering containes inside containers
@mixin absoluteCenter($position) {
  position: absolute;

  @if $position== "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position== "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position== "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

/* Center with flex 
*/
@mixin centerElements() {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Clearfix
clear the space below
whenever you have content floating both to the left and right 
.container-with-floated-children {
  @include @clearfix;
}
--*/
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/* ==========================================================================
   #FONTSIZE  & CONSISTENCIES
   ========================================================================== */

@function calculateRem($pixelsize) {
  $remSize: calc($pixelsize / 16px);
  @return $remSize;
}

/* use to define the viewport width in a media query.
**example of usage 
** 
.MyComponent {
    display: block;
  
    // Call the min-width mixin and pass 768 as the argument.
    // min-width passes 768 and calculateRem converts the unit.
    @include min-width(768) {
      display: flex;
    }
  }
  */
@mixin min-width($threshold) {
  @media screen and (min-width: calculateRem($threshold)) {
    @content;
  }
}

@mixin font-size($size) {
  font-size: $size; // this is a pixel fallback for browsers that donâ€™t support rem (IE8 and below)
  font-size: calculateRem($size);
}

// Dynamic text
// We define `null` as the default value for each argument
// example of usage :
// x{ @include text(18px, 24px, 700);}
// x{ @include text($weight: 800, $size: 12px);}
@mixin text($size: null, $lineHeight: null, $weight: null) {
  @if $size !=null {
    font-size: $size;
  }

  @if $lineHeight !=null {
    line-height: $lineHeight;
  }

  @if $weight !=null {
    font-weight: $weight;
  }
}

/* ==========================================================================
   #COLORS , BACKGROUNDS & BORDERS
          
                $spl-color-primary-light : #4D59EF;
                $spl-color-primary : #1421dc;
                $spl-color-primary-dark : #070D4F;
                $spl-bgcolor-success : #E9F6F1;
                $spl-bgcolor-alert : #FFF6E0;
                $spl-bgcolor-error : #FFE0E6;
                $spl-bgcolor-information : #F6F6FE;
   ========================================================================== */
@mixin forground-color {
  .white {
    color: white;
  }

  .black {
    color: black;
  }

  .blue {
    color: #1421dc;
  }

  .lightblue {
    color: #4d59ef;
  }

  .darkblue {
    color: #070d4f;
  }

  .orange {
    color: orange !important;
  }
}

@include forground-color();

// =================================================//
@mixin background-color {
  .bgwhite {
    background: white;
  }

  .bgblack {
    background: black;
  }

  .bgblue {
    background: #1421dc;
  }

  .bglightblue {
    background: #4d59ef;
  }

  .bgdarkblue {
    background: #070d4f;
  }

  .bgsuccess {
    background: #e9f6f1;
  }

  .bgalert {
    background: #fff6e0;
  }

  .bgerror {
    background: #ffe0e6;
  }

  .bginfo {
    background: #f6f6fe;
  }
}

@include background-color();

// =================================================//
@mixin border(
  $width: 1px,
  $style: solid,
  $borderColor: $spl-bordercolor,
  $borderRadius: 6px
) {
  @if ($width == 1px) {
    border: $width $style $borderColor;
    border-radius: $borderRadius;
  } @else {
    border-radius: $borderRadius;
  }
}

// =================================================//

//Automatically change brightness of font-colour based on background-color
@function set-textnbg-color($color) {
  @if (lightness($color) > 50) {
    @return darken($color, 100%); // return black
  } @else {
    @return lighten($color, 100%); // return white
  }
}

// =================================================//

// switchable color schemes
@mixin text-color($color: primary, $effect: none) {
  @if ($color==primary) {
    color: $spl-textcolor-white;

    @if ($effect==hover) {
      &:hover {
        color: rgba($spl-textcolor-white, 0.4);
      }
    }

    /* This class denotes a color scheme */
    .alternate-theme & {
      background-color: $spl-bgcolor-white;
      color: $spl-color-primary;
      border: 1px solid $spl-color-primary;
      border-radius: 6px;

      @if ($effect==hover) {
        &:hover {
          color: $spl-color-primary-light;
        }
      }
    }
  }

  @if ($color==secondary) {
    color: $spl-textcolor-white;
    background-color: $spl-color-secondary;

    @if ($effect==hover) {
      &:hover {
        color: rgba($spl-textcolor-white, 0.4);
      }
    }

    /* This class denotes a color scheme */
    .alternate-theme & {
      background-color: $spl-bgcolor-white;
      color: $spl-color-secondary;

      @if ($effect==hover) {
        &:hover {
          color: rgba($spl-textcolor-white, 0.4);
        }
      }
    }
  }
}

/* ==========================================================================
   #MARGINS AND PADDINS
   ========================================================================== */

//Padding mixin
@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}

//Margin mixin
// example of usage : @include padding(1px, null, 3px, 4px);
@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}

// example of usage : class="p4 mb4"
@mixin margin-classes {
  @for $i from 1 through 20 {
    $margin: $i * 0.25rem;

    /* margin #{$margin} */
    .m#{$i} {
      margin: $margin;
    }

    .ml#{$i} {
      margin-left: $margin;
    }

    .mr#{$i} {
      margin-right: $margin;
    }

    .mt#{$i} {
      margin-top: $margin;
    }

    .mb#{$i} {
      margin-bottom: $margin;
    }

    .mx#{$i} {
      margin-left: $margin;
      margin-right: $margin;
    }

    .my#{$i} {
      margin-top: $margin;
      margin-bottom: $margin;
    }
  }
}

@include margin-classes;

@mixin padding-classes {
  @for $i from 1 through 20 {
    $padding: $i * 0.25rem;

    /* padding #{$padding} */
    .p#{$i} {
      padding: $padding;
    }

    .pl#{$i} {
      padding-left: $padding;
    }

    .pr#{$i} {
      padding-right: $padding;
    }

    .pt#{$i} {
      padding-top: $padding;
    }

    .pb#{$i} {
      padding-bottom: $padding;
    }

    .px#{$i} {
      padding-left: $padding;
      padding-right: $padding;
    }

    .py#{$i} {
      padding-top: $padding;
      padding-bottom: $padding;
    }
  }
}

@include padding-classes;

/* ==========================================================================
   #MEDIA QUERIES
   ========================================================================== */

/* manage responsive breakpoints
   @param {String} $breakpoint - Breakpoint name
   @require $breakpoints
*/

// $breakpoints: (xsmall: $xs,
//    small: $sm,
//    medium: $md,
//    large: $lg,
//    xlarge: $xl) !default;
// @mixin respond-to($breakpoint) {
//     @if map-has-key($breakpoints, $breakpoint) {
//       @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
//         @content;
//       }
//     }
//       // If the key doesn't exist in the map
//   @else {
//     @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
//         + "Available breakpoints are: #{map-keys($breakpoints)}.";
//   }
// }

/*
Conditional media query mixin 
*/

@function translate-media-condition($c) {
  $condMap: (
    "screen": "only screen",
    "print": "only print",
    "retina":
      "(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 120dpi)",
    ">maxWidth": "(min-width: #{$xl + 1})",
    "<maxWidth": "(max-width: #{$xl})",
    ">medWidth": "(min-width: #{$md + 1})",
    "<medWidth": "(max-width: #{$md})",
    ">minWidth": "(min-width: #{$sm + 1})",
    "<minWidth": "(max-width: #{$sm})",
  );
  @return map-get($condMap, $c);
}

@mixin media($args...) {
  $query: "";

  @each $arg in $args {
    $op: "";

    @if ($query != "") {
      $op: " and ";
    }

    $query: $query + $op + translate-media-condition($arg);
  }

  @media #{$query} {
    @content;
  }
}

/*
mixin for links 
usage : 
a {
    @include links(orange, blue, yellow, teal);
}
*/

@mixin links($link, $visited, $hover, $active) {
  & {
    color: $link;

    &:visited {
      color: $visited;
    }

    &:hover {
      color: $hover;
    }

    &:active,
    &:focus {
      color: $active;
    }
  }
}

/*Notification theme customazation */
@mixin notification-theme($notifications-theme) {
  $default-color: map-get($notifications-theme, default);
  $info-color: map-get($notifications-theme, info);
  $success-color: map-get($notifications-theme, success);
  $warn-color: map-get($notifications-theme, warning);
  $error-color: map-get($notifications-theme, error);
  .default,
  .info,
  .success,
  .warning,
  .error {
    border-left: 4px solid;
  }
  .mat-snack-bar-container {
    color: black !important;
  }

  .default {
    // border-left-color: $default-color;
    background: $default-color !important;
  }
  .info {
    // border-left-color: $spl-color-primary-dark;
    background: $spl-color-primary-light !important;
    color: $spl-color-secondary;
    button {
      color: white;
    }
  }
  .success {
    // border-left-color: $success-color;
    background: $success-color !important;
  }
  .warning {
    // border-left-color: $warn-color;
    background: $warn-color !important;
  }
  .error {
    // border-left-color:white;
    background: $error-color !important;
  }
}
